package com.convenitent.framework.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.text.TextUtils;

import com.convenitent.framework.app.$;

import java.io.UnsupportedEncodingException;
import java.net.NetworkInterface;
import java.util.UUID;

/**
 * Created by yangboqing on 16/8/16.
 * 设备相关的工具类
 */
public final class DeviceUtils {

    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";

    /**
     * 获取设备的mac地址
     * 这里要特别说明一下,mac地址不是一定能获取的到的,你可能要更优先使用设备ID
     * 这里是通过java api的方法来获取的，适配到android_6.0
     *
     * @return wifi mac地址
     */
    public static String $mac() {
        String result = null;
        try {
//            String path = "sys/class/net/wlan0/address";
//            if ((new File(path)).exists()) {
//                FileInputStream fis = new FileInputStream(path);
//                byte[] buffer = new byte[8192];
//                int byteCount = fis.read(buffer);
//                if (byteCount > 0) {
//                    result = new String(buffer, 0, byteCount, "utf-8");
//                }
//            }
//            if (TextUtils.isEmpty(result)) {
//                path = "sys/class/net/eth0/address";
//                FileInputStream fis_name = new FileInputStream(path);
//                byte[] buffer_name = new byte[8192];
//                int byteCount_name = fis_name.read(buffer_name);
//                if (byteCount_name > 0) {
//                    result = new String(buffer_name, 0, byteCount_name, "utf-8");
//                }
//            }
            NetworkInterface wlan0Interface = NetworkInterface.getByName("wlan0");
            byte[] addr = wlan0Interface.getHardwareAddress();
            if (addr != null && addr.length > 0) {
                StringBuilder buf = new StringBuilder();
                for (byte b : addr) {
                    buf.append(String.format("%02X:", b));
                }
                if (buf.length() > 0) {
                    buf.deleteCharAt(buf.length() - 1);
                }
                result = buf.toString();
                LogUtils.$d(result);
            }
            if (TextUtils.isEmpty(result)) {
                WifiManager wifi = (WifiManager) $.sAppContext.getSystemService(Context
                        .WIFI_SERVICE);
                WifiInfo wifiInfo = wifi.getConnectionInfo();
                result = wifiInfo.getMacAddress();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    /**
     * Returns a unique UUID for the current android device. As with all UUIDs,
     * this unique ID is "very highly likely" to be unique across all Android
     * devices. Much more so than ANDROID_ID is.
     * <p>
     * The UUID is generated by using ANDROID_ID as the base key if appropriate,
     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
     * be incorrect, and finally falling back on a random UUID that's persisted
     * to SharedPreferences if getDeviceID() does not return a usable value.
     * <p>
     * In some rare circumstances, this ID may change. In particular, if the
     * device is factory reset a new device ID may be generated. In addition, if
     * a user upgrades their phone from certain buggy implementations of Android
     * 2.2 to a newer, non-buggy version of Android, the device ID may change.
     * Or, if a user uninstalls your app on a device that has neither a proper
     * Android ID nor a Device ID, this ID may change on reinstallation.
     * <p>
     * Note that if the code falls back on using TelephonyManager.getDeviceId(),
     * the resulting ID will NOT change after a factory reset. Something to be
     * aware of.
     * <p>
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
     * directly.
     *
     * @return a UUID that may be used to uniquely identify your device for most
     * purposes.
     * @see "http://code.google.com/p/android/issues/detail?id=10603"
     */
    public synchronized static UUID $deviceUuid() {
        UUID uuid;
        final SharedPreferences prefs = $.sAppContext.getSharedPreferences(PREFS_FILE, 0);
        final String id = prefs.getString(PREFS_DEVICE_ID, null);
        if (id != null) {
            // Use the ids previously computed and stored in the
            // prefs file
            uuid = UUID.fromString(id);
        } else {
            final String androidId = Settings.Secure
                    .getString($.sAppContext.getContentResolver(),
                            Settings.Secure.ANDROID_ID);
            // Use the Android ID unless it's broken, in which case
            // fallback on deviceId,
            // unless it's not available, then fallback on a random
            // number which we store
            // to a prefs file
            try {
                if (!"9774d56d682e549c".equals(androidId)) {
                    uuid = UUID.nameUUIDFromBytes(androidId
                            .getBytes("utf8"));
                } else {
                    final String deviceId = ((TelephonyManager) $.sAppContext
                            .getSystemService(Context.TELEPHONY_SERVICE))
                            .getDeviceId();
                    uuid = deviceId != null ? UUID
                            .nameUUIDFromBytes(deviceId
                                    .getBytes("utf8")) : UUID
                            .randomUUID();
                }
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            // Write the value out to the prefs file
            prefs.edit()
                    .putString(PREFS_DEVICE_ID, uuid.toString())
                    .commit();
        }
        return uuid;
    }


}
